"use strict";

/*
###Задание 2
Вы управляете рестораном, в котором работают разные повара, специализирующиеся 
на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
Необходимо реализовать функцию newOrder. Создавать вспомогательные функции, 
коллекции, не запрещается. Старайтесь использовать коллекции Map/Set, где это 
актуально. Представленный ниже код должен работать.

Повара и их специализации:
Олег - специализация: Пицца.
Андрей - специализация: Суши.
Анна - специализация: Десерты.

Блюда, которые могут заказать посетители:
Пицца "Маргарита"
Пицца "Пепперони"
Пицца "Три сыра"
Суши "Филадельфия"
Суши "Калифорния"
Суши "Чизмаки"
Суши "Сеякемаки"
Десерт Тирамису
Десерт Чизкейк
*/

// Посетитель ресторана.
class Client {
    constructor(firstname, lastname) {
        this.firstname = firstname;
        this.lastname = lastname;
    }
}

// Вам необходимо реализовать класс, который управляет заказами и поварами.
class Manager {
    constructor() {
        this.chefs = new Map(); // Коллекция поваров (имя повара -> его специализация)
        this.menu = new Set(); // Коллекция доступных блюд

        // Инициализация поваров и их специализаций
        this.chefs.set("Олег", "Пицца");
        this.chefs.set("Андрей", "Суши");
        this.chefs.set("Анна", "Десерты");

        // Инициализация доступных блюд
        this.menu.add('Пицца "Маргарита"');
        this.menu.add('Пицца "Пепперони"');
        this.menu.add('Пицца "Три сыра"');
        this.menu.add('Суши "Филадельфия"');
        this.menu.add('Суши "Калифорния"');
        this.menu.add('Суши "Чизмаки"');
        this.menu.add('Суши "Сеякемаки"');
        this.menu.add("Десерт Тирамису");
        this.menu.add("Десерт Чизкейк");
    }

    // Метод для обработки заказа
    newOrder(client, ...orders) {
        console.log(`Клиент ${client.firstname} заказал:`);

        for (const order of orders) {
            const { name, quantity, type } = order;

            if (this.menu.has(`${type} "${name}"`)) {
                const chef = this.getChefBySpecialization(type);
                if (chef) {
                    console.log(
                        `${type} "${name}" - ${quantity}; готовит повар ${chef}`
                    );
                } else {
                    console.log(`Повар для ${type} "${name}" не найден.`);
                }
            } else {
                console.log(`Блюдо ${type} "${name}" не существует.`);
            }
        }
    }
    getChefBySpecialization(specialization) {
        for (const [chef, spec] of this.chefs) {
            if (spec === specialization) {
                return chef;
            }
        }
        return null;
    }
}

// Можно передать внутрь конструктора что-либо, если необходимо.
const manager = new Manager();

// Вызовы ниже должны работать верно, менять их нельзя, удалять тоже.
manager.newOrder(
    new Client("Иван", "Иванов"),
    { name: "Маргарита", quantity: 1, type: "Пицца" },
    { name: "Пепперони", quantity: 2, type: "Пицца" },
    { name: "Чизкейк", quantity: 1, type: "Десерт" }
);
// Вывод:
// Клиент Иван заказал:
// Пицца "Маргарита" - 1; готовит повар Олег
// Пицца "Пепперони" - 2; готовит повар Олег
// Десерт "Чизкейк" - 1; готовит повар Анна

// ---

const clientPavel = new Client("Павел", "Павлов");
manager.newOrder(
    clientPavel,
    { name: "Филадельфия", quantity: 5, type: "Суши" },
    { name: "Калифорния", quantity: 3, type: "Суши" }
);
// Вывод:
// Клиент Павел заказал:
// Суши "Филадельфия" - 5; готовит повар Андрей
// Суши "Калифорния" - 3; готовит повар Андрей

manager.newOrder(
    clientPavel,
    { name: "Калифорния", quantity: 1, type: "Суши" },
    { name: "Тирамису", quantity: 2, type: "Десерт" }
);
// Вывод:
// Клиент Павел заказал:
// Суши "Филадельфия" - 5; готовит повар Андрей
// Суши "Калифорния" - 4; готовит повар Андрей
// Десерт "Тирамису" - 2; готовит повар Анна

manager.newOrder(
    clientPavel,
    { name: "Филадельфия", quantity: 1, type: "Суши" },
    { name: "Трубочка с вареной сгущенкой", quantity: 1, type: "Десерт" }
);
// Ничего не должно быть добавлено, должна быть выброшена ошибка:
// Десерт "Трубочка с вареной сгущенкой" - такого блюда не существует.
